box-sizing: border-box; => ao invés do padding adicionar ao tamanho final, ele reduz espaço pro conteudo na div.
visibility: hidden; => esconde o elemento, mas guarda o espaço.
float: right; => deixa a div flutuando à direita, mas causa muito efeito colateral
clear: right; => remove efeito colateral do float: right;
clear: both; => clear left and right;
Elementos com float se entendem, mas a div mãe para de reconhecer como filhos => para corrigir, usar overflow: auto (gambiarra)
	clearfix é mais elegante (???)
position: relative; => elemento é relativo a ele mesmo
	Não altera os elementos, ainda segura a posição, mas faz uma projeçao pra outro lugar
	usado em conjunto com top, right, left, bottom...
position: absolute; => elemento é relativo ao último elemento pai posicionado (body, absolute, relative, fixed)
position: fixed; => relativo à tela. Fica fixo na janela do browser.
<dl>, <dt> e <dd> => lista, termo, definição.
<sub> e <sup> fazer subescrito ou sobrescrito.
<code> representa uma linha de codigo
<q cite="http://..."> usado para citaçoes pequenas
<blockquote cite=...> usado para citaçoes maiores
<pre> considera os espaços, quebras de linha e etc
A unidade "em" se refere ao tamanho do objeto. Se eu coloco 2em eu to dizendo que o tamanho é duas vezes o tamanho do objeto.
a:last-child => aplica ao ultimo herdeiro
border-collapse: collapse => junta as bordas
a:nth-child(n) => seleciona o n-esimo filho se ele for da classe a; n pode ser even, odd, etc
a:nth-child(3n - 1) => seleciona cada multiplo de 3 - 1
outline: none; => tira borda azul padrao do browser
input[type="text"]{} => altera todo input do tipo texto
max-width: 100%; => ajusta ate o tamanho maximo da imagem
.anterior + .posterior {} => seleciona todo elemento posterior que em apos o anterior
transition all; => faz a transiçao de tudo
cursor: pointer; => coloca a maozinha
white-spaces: nowrap; => decide como tratar espacos
article é o que faz sentido por si so
section é uma div com relacao entre os conteudos
article p > b {} => pega todo p que é filho direto de b
article h3 + p {} => pega o p que vem exatamente após um elemento h3
article h3 ~ p {} => pega todos os p que vem após o h3
a[title]{} => seleciona todo a que possui o atributo title
a[href^=http] => seleciona todo atributo que href inicia com http
a[src$=".png"] => seleciona todo atributo que termina com .png
:not(a) => seleciona todos elementos que nao sao link
p:not(.destaque) => seleciona todos p que nao sao da classe destaque
img:not([alt]) {} => seleciona todas as imagens que nao possuem atributo alt
opacity: .2; => define opacidade
texto:before {content=""} => adiciona elemento visual antes do conteudo
texto:after {content=""} => adiciona elemento visual apos o conteudo
input[type="checkbox"]:checked {} => faz alguma coisa se a checkbox estiver checada
<button disabled>Qqr coisa</button>
	button:disabled{} => faz alguma coisa com o botao desabilitado 
p:empty:before {content=""} => adiciona alguma coisa antes dos paragrafos vazios
<div tabindex="1"></div> => força a div a receber focus
<input type="text" value="valor inicial" readonly> => somente leitura
input::placeholder {} => formata o placeholder
div p:nth-of-type(4) => pega o quarto elemento do tipo paragrafo
p::first-letter{
	float: left;
	font-size: 3em;
	line-height: 1;
	display: inline-block;
	margin-right: .1em
	} => formata a primeira letra
p::first-line{} => formata a primeira linha
p::selection{} => formata a selecao
transform: translate(50px, 50px) => a diferenca do transform pro position relative é
	quuando trabalhamos com porcentagens => no position relative temos como referencia
	a largura do elemento pai e no transform a ref é o próprio elemento.
translateX e translateY sao outras formas de representar
transform: rotate(45deg); => rotaciona 45 graus
transform-origin: left top; => muda o eixo de rotacao
transform: rotate(30deg) translate(50px, 50px) => se eu quiser aplicar as duas
transform: skewY(30deg) skewX(30deg) => deforma o elemento;
transform: scaleX(2) scaleY(3) => muda a escala do elemento;
border-top-color: transparent; => deixa a borda de cima transparente
a:after{
	content: "(" attr(href) ")";
	} => evidencia o conteudo de href

@media screen and (win-width: 400px){
	body{
		background-color: orange;
	{
} => muda a cor do background se a tela passar 400px de width
<meta name="viewport" content="width=device-width">
.clearfix::after{
	content: ' ';
	display: block;
	clear: both;
} => faz o papel do overflow: auto;
"1em" equivale ao font-size do elemento pai;
"1rem" equivale ao font-size do elemento root (html)
margin: auto; => centraliza <<<<<<<<
colocar @charset "UTF-8"; no inicio do arquivo css é uma boa pratica
text-align formata todos elementos de linha
<audio>
	<source src="media/sound.mp3" type="audio/mp3">
	<source src="media/sound.ogg" type="audio/ogg">
	<p>Seu browser nao suporta este recurso</p>
</audio> => toca audio
<video controls autoplay loop muted controlsList="nodownload"> =>semelhante ao audio
<iframe src="http..." width="100%" height="100%"></iframe> => insere outra pagina dentro da pagina
<figure>
	<img src="..." alt="">
	<figcaption>legenda qqr</figcaption>
</figure> => usada para figuras que podem se removidas, que a ordem de aparicao é irrelevante
	     é como se fosse um article em imagem...

#idqualquer:before {
	counter-reset: contador;
	counter-increment: contador;
	content: counter(contador)
}

background-clip: content-box => apenas o conteúdo
background-clip: padding-box => do padding pra dentr
background-clip: border-box => tudo
background-color: hsl(30deg, %saturação, %luminosidade)
background-color: linear-gradient(to bottom right, red, blue);
background-color: linear-gradient(68deg, red, blue);
background-image: radial-gradient(circle, red 50%, blue, orange, green);
background-image: radial-gradient(farthest-side at 20% 90%, red 50%, blue, orange, green);
background-image: radial-gradient(closest-corner at 20% 90%, red 50%, blue, orange, green);
repeating-linear-gradient => vai repetindo o gradiente
background-attachment: fixed; => fixa o gradiente e permite andar no gradiente

display: flex; => define flexbox
flex-direction: row; => define o sentido de crescimento
flex-wrap: wrap; => define se há quebra de linha
flex-flow: row nowrap; => junta os dois anteriores
justify-content: flex-end; => posição horizontal
align-items: stretch; => posição vertical
align-self: flex-end; => alinha o elemento isoladamente
align-content: flex-end; => alinha grupo de elementos
flex-grow: 1 => pega 100% do espaço em branco excedente. O número equivale ao peso.
flex-shrink: 1 => seleciona as prioridades de encolhimento dos elementos
flex: 0 1 100px; (grow shrink basis)
order: 3; => define a ordem dos elementos 
flex-direction: column => inverte eixos

display: grid;
grid-template-columns: 100px 100px 100px;
grid-template-columns: 100px 100px 1fr; => 1fr = 1 fração de todo elemento que excede
grid-template-rows: 100px 100px;
grid-template-rows: repeat(2, 100px);
grid-row-gap: 20px;
grid-column-gap: 30px;

Posicionamento de celulas =
	grid-row-start: 1;
	grid-row-end: 2;
	grid-row: 1 / 2;

	grid-column-start: 3;
	grid-column-end: 4;
	grid-column: 3 / 4;
	grid-column: 2 / span 2; => começa na 2 e ocupa 2 células

	grid-column-end: -1; => -1 é a última linha
	celulas podem se sobrepor

	z-index: 1; define posição em camadas

.Container {
	display: grid;
	grid-gap: 20px;
	grid-template-columns: repeat(3, 1fr);
	grid-template-rows: 100px 50px 1fr 50px;
	grid-template-areas:
		"header header header"
		"nav 	nav	   aside" => "." para espaços em branco
		"main   main   aside"
		"footer footer aside"
}

.header{
	grid-area: header;
}

.nav {
	grid-area: nav;
}

.aside{
	grid-area: aside;
}

.main{
	grid-area: main;
}

========
.Container {
	display: grid;
	grid-gap: 20px;
	grid-template-rows:    [header-start] 100px 
						   [header-end nav-start] 50px 
						   [nav-end main-start] 1fr 
						   [main-end footer-start] 50px
						   [footer-end];
	grid-template-columns: [col1-start] 1fr [col1-end col2-start] 1fr [col2-end col3-start] 1fr [col3-end];


.header{
	grid-column: col1-start / col3-end;
	grid-row: header-start / header-end; => pode ser simplificado escrevendo só "header"

}

========

.Container {
	display: grid;
	grid-gap: 20px;
	grid-template-rows:    [header-start] 100px 
						   [header-end nav-start] 50px 
						   [nav-end main-start] 1fr 
						   [main-end footer-start] 50px
						   [footer-end];
	grid-template-columns: repeat(3, [col-start] 1fr [col-end]);


.header{
	grid-column: col-start 1 / col-end 3;
	grid-row: header;
	
}


========

.Container {
	grid-template-columns: repeat(auto-fill,   =>  completa com colunas invisíveis
						   minmax(100px, 1fr));
	grid-template-columns: repeat(auto-fill,   =>  semelhante ao float left
						   minmax(100px, 1fr));
	grid-auto-rows: 100px; => dá um tamanho automático de 100 px pras linhas
	grid-auto-rows: 100px 50px; => vai alternando;
}

<kbd>CTRL</kbd>
<abbr title="Universidade Federal de Juiz de Fora">UFJF</abbr>
<time datetime="2019-09-15T20:00:00-03:00">15/09/2019 - 20h</time>
<p>HTML é <del>complicado</del> <ins>fácil</ins></p>
<span lang="en-us">JS Conference</span>

color: black !important; => sobrescreve demais regras

div#jubotron>h2{subtitulo}+p{paragrafos}*2 => estudar essa parada! Emmet abbreviation
ul.MainNav => acho que pega todos ul da classe mainnav
.jumbotron__text
height: 100vh; => 100% da viewport height
width: 50wh; => 50% da viewport width

box-shadow: inset 3px 2px 0 white;


================================
ANIMAÇÕES
animation-name: anda;
animation-duration: 2s;
animation-timing-function: ease-in;
animation-delay: 1s;
animation-iteration-count: infinite;
animation-direction: alternate;
animation-fill-mode: backwards; => começa cm as propriedades definidas no keyframe
					 forwards; => termina com as propriedades definidas no keyframe
					 both; => só considera os valores da animação
animation: anda 2s ease-in 1s infinite alternate;
animation-play-state: running;
animation-play-state: paused;

@keyframes anda{
	0%{
		transform: transalateX(0);
		background: yellow;
	}

	25%, 75%{

	}

	100%{

	}
}

object-fit: cover;
will-change: transform; => se animação ficar pulando
resize: none; => prevents textarea to resize
<textarea maxlength="100" id="texto">Insira o texto</textarea>
<textarea cols="50" rows="10" readonly>
<meta name="viewport" content="width=device-width, initial-scale=1">
deixar elemeno clicável com height de 48px;

img {
	max-width: 100%;
}

.hero{
	height: 80vh;
	pading: 40px 20px;
	text-align: center;
	background-image: url(image);
	background-size: cover;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	text-transform: uppercase;

}

outline: 2px solid blue; => diferente do border, fica acima do item
outline-offset: -5px; => anda o outline;
word-spacing: 2px; => define espaço entre as palavras
white-space: nowrap; => previne que inline-blocks pulem pra próxima linha